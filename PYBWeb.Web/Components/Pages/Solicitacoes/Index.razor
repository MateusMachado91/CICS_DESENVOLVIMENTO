@page "/solicitacoes"
@rendermode InteractiveServer
@using PYBWeb.Domain.Entities
@using PYBWeb.Domain.Interfaces
@using PYBWeb.Domain.Enums
@inject ISolicitacoesCics2025Service SolicitacoesCics2025Service
@inject NavigationManager Navigation

<PageTitle>Solicitações - PYB CICS</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-6 text-primary">
                <i class="bi bi-file-earmark-text"></i> Solicitações CICS
            </h1>
        </div>
        <div class="col-md-4 text-end">
            <a href="/solicitacoes/nova" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Nova Solicitação
            </a>
        </div>
    </div>

    <!-- Filtros -->
    <div class="row mb-3">
        <div class="col-md-3">
            <label for="filtroStatus" class="form-label">Status:</label>
            <select id="filtroStatus" class="form-select" @bind="filtroStatus" @bind:after="AplicarFiltros">
                <option value="">Todos</option>
                <option value="Pendente">Pendente</option>
                <option value="Em Análise">Em Análise</option>
                <option value="Aprovada">Aprovada</option>
                <option value="Rejeitada">Rejeitada</option>
                <option value="Implementada">Implementada</option>
                <option value="Cancelada">Cancelada</option>
                <option value="Desconsiderada">Desconsiderada</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="filtroTipoTabela" class="form-label">Tipo de Tabela:</label>
            <select id="filtroTipoTabela" class="form-select" @bind="filtroTipoTabela" @bind:after="AplicarFiltros">
                <option value="">Todas</option>
                <option value="DCT">DCT</option>
                <option value="FCT">FCT</option>
                <option value="PCT">PCT</option>
                <option value="PPT">PPT</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="filtroTexto" class="form-label">Buscar:</label>
            <input id="filtroTexto" type="text" class="form-control" placeholder="Número, usuário, CSS ou aplicação..." @bind="filtroTexto" @onkeyup="AplicarFiltros" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-secondary w-100" @onclick="LimparFiltros">
                <i class="bi bi-x-circle"></i> Limpar
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
        </div>
    }
    else 
    {
        @if (solicitacoesFiltradas?.Any() != true)
        {
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle"></i> Nenhuma solicitação encontrada com os filtros aplicados.
                <br><small>Total de solicitações sem filtro: @todasSolicitacoes.Count()</small>
            </div>
        }
        else
        {
        <!-- Tabela de Solicitações -->
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Número</th>
                        <th>Tipo Tabela</th>
                        <th>CSS</th>
                        <th>Applid</th>
                        <th>Usuário</th>
                        <th>Status</th>
                        <th>Data</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var solicitacao in solicitacoesFiltradas)
                    {
                        <tr class="@GetRowClass(solicitacao)" style="cursor: pointer;" @onclick="() => SelecionarSolicitacao(solicitacao)">
                            <td>
                                <strong>@solicitacao.NumeroSolicitacao</strong>
                            </td>
                            <td>
                                <span class="badge @GetBadgeClassTipoTabela(solicitacao.TipoTabela)">
                                    @solicitacao.TipoTabela
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-secondary">@solicitacao.Css</span>
                            </td>
                            <td><strong>@solicitacao.Appli</strong></td>
                            <td>@solicitacao.Usuario</td>
                            <td>
                                <span class="badge @GetBadgeClassStatus(solicitacao.Status)">
                                    @solicitacao.Status
                                </span>
                            </td>
                            <td>@solicitacao.DataSolicitacao.ToString("dd/MM/yyyy HH:mm")</td>
                        </tr>
                        
                        <!-- Linha de detalhes expandidos (aparece somente se esta solicitação estiver selecionada) -->
                        @if (solicitacaoSelecionada?.Id == solicitacao.Id)
                        {
                            <tr class="table-info">
                                <td colspan="7">
                                    <div class="card border-0">
                                        <div class="card-body">
                                            <h6 class="card-title">
                                                <i class="bi bi-info-circle"></i> Detalhes da Solicitação @solicitacao.NumeroSolicitacao
                                            </h6>
                                            
                                            <!-- Informações gerais -->
                                            <div class="row mb-3">
                                                <div class="col-md-3">
                                                    <strong>Data Solicitação:</strong><br>
                                                    @solicitacao.DataSolicitacao.ToString("dd/MM/yyyy HH:mm:ss")
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>Data Efetivação:</strong><br>
                                                    @(solicitacao.DataEfetivacao?.ToString("dd/MM/yyyy") ?? "N/A")
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>Responsável Efetivação:</strong><br>
                                                    @(solicitacao.ResponsavelEfetivacao ?? "N/A")
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>Operação:</strong><br>
                                                    @(solicitacao.Operacao ?? "N/A")
                                                </div>
                                            </div>

                                            <!-- Informações da aplicação -->
                                            <div class="row mb-3">
                                                <div class="col-md-3">
                                                    <strong>Aplicação:</strong><br>
                                                    @solicitacao.Appli
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>CSS:</strong><br>
                                                    @solicitacao.Css
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>Usuário:</strong><br>
                                                    @solicitacao.Usuario
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>Tipo Tabela:</strong><br>
                                                    @solicitacao.TipoTabela
                                                </div>
                                            </div>
                                            
                                            @if (!string.IsNullOrEmpty(solicitacao.ObservacoesAdmin))
                                            {
                                                <hr>
                                                <h6><i class="bi bi-chat-left-text"></i> Observações Administrativas</h6>
                                                <div class="alert alert-info">
                                                    @solicitacao.ObservacoesAdmin
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Painel de Ações (aparece apenas quando uma solicitação está selecionada) -->
        @if (solicitacaoSelecionada != null)
        {
            <div class="card mt-3">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">
                        <i class="bi bi-gear"></i> Ações para @solicitacaoSelecionada.NumeroSolicitacao
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-flex gap-2 flex-wrap">
                        @if (solicitacaoSelecionada.Status != "Cancelada")
                        {
                            <button class="btn btn-primary" @onclick="() => AlterarSolicitacao(solicitacaoSelecionada.Id)">
                                <i class="bi bi-pencil"></i> Alterar
                            </button>
                            <button class="btn btn-warning" @onclick="() => DesconsiderarSolicitacao(solicitacaoSelecionada.Id)">
                                <i class="bi bi-x-octagon"></i> Cancelar
                            </button>
                        }
                        <button class="btn btn-danger" @onclick="() => ExcluirSolicitacao(solicitacaoSelecionada.Id)">
                            <i class="bi bi-trash"></i> Excluir
                        </button>
                        <button class="btn btn-secondary" @onclick="LimparSelecao">
                            <i class="bi bi-x-circle"></i> Cancelar Seleção
                        </button>
                    </div>
                </div>
            </div>
        }

        <!-- Informações da Lista -->
        <div class="row mt-3">
            <div class="col-12">
                <small class="text-muted">
                    Mostrando @solicitacoesFiltradas.Count() de @todasSolicitacoes.Count() solicitações
                </small>
            </div>
        </div>
        } <!-- Fim do else -->
    } <!-- Fim do else principal -->
</div>

@code {
    private bool isLoading = true;
    private IEnumerable<SolicitacaoCics2025> todasSolicitacoes = new List<SolicitacaoCics2025>();
    private IEnumerable<SolicitacaoCics2025> solicitacoesFiltradas = new List<SolicitacaoCics2025>();
    private SolicitacaoCics2025? solicitacaoSelecionada = null;

    private string filtroStatus = "";
    private string filtroTipoTabela = "";
    private string filtroTexto = "";
    
    private int idSolicitacaoParaExcluir = 0;
    private int idSolicitacaoParaDesconsiderar = 0;

    protected override async Task OnInitializedAsync()
    {
        await CarregarSolicitacoes();
    }

    private async Task CarregarSolicitacoes()
    {
        isLoading = true;
        try
        {
            todasSolicitacoes = await SolicitacoesCics2025Service.ObterTodasSolicitacoesAsync();
            AplicarFiltros();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar solicitações: {ex.Message}");
            todasSolicitacoes = new List<SolicitacaoCics2025>();
            solicitacoesFiltradas = new List<SolicitacaoCics2025>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SelecionarSolicitacao(SolicitacaoCics2025 solicitacao)
    {
        if (solicitacaoSelecionada?.Id == solicitacao.Id)
        {
            // Se clicar na mesma solicitação, desmarca (toggle)
            solicitacaoSelecionada = null;
        }
        else
        {
            // Seleciona a nova solicitação
            solicitacaoSelecionada = solicitacao;
        }
        StateHasChanged();
    }

    private void LimparSelecao()
    {
        solicitacaoSelecionada = null;
        StateHasChanged();
    }

    private void AplicarFiltros()
    {
        solicitacoesFiltradas = todasSolicitacoes;

        // Filtro por status
        if (!string.IsNullOrEmpty(filtroStatus))
        {
            solicitacoesFiltradas = solicitacoesFiltradas.Where(s => s.Status == filtroStatus);
        }

        // Filtro por tipo de tabela
        if (!string.IsNullOrEmpty(filtroTipoTabela))
        {
            solicitacoesFiltradas = solicitacoesFiltradas.Where(s => s.TipoTabela == filtroTipoTabela);
        }

        // Filtro por texto
        if (!string.IsNullOrEmpty(filtroTexto))
        {
            var textoLower = filtroTexto.ToLower();
            solicitacoesFiltradas = solicitacoesFiltradas.Where(s =>
                s.NumeroSolicitacao.ToLower().Contains(textoLower) ||
                s.Appli.ToLower().Contains(textoLower) ||
                s.Usuario.ToLower().Contains(textoLower) ||
                s.Css.ToLower().Contains(textoLower)
            );
        }

        solicitacoesFiltradas = solicitacoesFiltradas.OrderByDescending(s => s.DataSolicitacao);
        
        // Se a solicitação selecionada não está mais na lista filtrada, limpa a seleção
        if (solicitacaoSelecionada != null && !solicitacoesFiltradas.Any(s => s.Id == solicitacaoSelecionada.Id))
        {
            solicitacaoSelecionada = null;
        }
        
        StateHasChanged();
    }

    private void LimparFiltros()
    {
        filtroStatus = "";
        filtroTipoTabela = "";
        filtroTexto = "";
        AplicarFiltros();
    }

    private void AlterarSolicitacao(int id)
    {
        Navigation.NavigateTo($"/solicitacoes/{id}/editar");
    }

    private async Task ExcluirSolicitacao(int id)
    {
        idSolicitacaoParaExcluir = id;
        // TODO: Implementar confirmação de exclusão
        await ConfirmarExclusao();
    }

    private async Task DesconsiderarSolicitacao(int id)
    {
        idSolicitacaoParaDesconsiderar = id;
        // TODO: Implementar confirmação de desconsideração
        await ConfirmarDesconsideracao();
    }

    private async Task ConfirmarExclusao()
    {
        if (idSolicitacaoParaExcluir > 0)
        {
            try
            {
                await SolicitacoesCics2025Service.ExcluirSolicitacaoAsync(idSolicitacaoParaExcluir);
                
                // Se a solicitação excluída era a selecionada, limpa a seleção
                if (solicitacaoSelecionada?.Id == idSolicitacaoParaExcluir)
                {
                    solicitacaoSelecionada = null;
                }
                
                await CarregarSolicitacoes();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao excluir solicitação: {ex.Message}");
            }
            finally
            {
                idSolicitacaoParaExcluir = 0;
            }
        }
    }

    private async Task ConfirmarDesconsideracao()
    {
        if (idSolicitacaoParaDesconsiderar > 0)
        {
            try
            {
                await SolicitacoesCics2025Service.DesconsiderarSolicitacaoAsync(idSolicitacaoParaDesconsiderar);
                await CarregarSolicitacoes();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao cancelar solicitação: {ex.Message}");
            }
            finally
            {
                idSolicitacaoParaDesconsiderar = 0;
            }
        }
    }

    private string GetSelectionClass(int id)
    {
        return solicitacaoSelecionada?.Id == id ? "active" : "";
    }

    private string GetRowClass(SolicitacaoCics2025 solicitacao)
    {
        var classes = new List<string>();
        
        // Adiciona classe para linha selecionada
        if (solicitacaoSelecionada?.Id == solicitacao.Id)
        {
            classes.Add("table-primary");
        }
        
        // Adiciona classe para status cancelada
        if (solicitacao.Status == "Cancelada")
        {
            classes.Add("table-secondary");
        }
        
        return string.Join(" ", classes);
    }

    private string GetStatusClass(string status)
    {
        return status == "Desconsiderada" ? "list-group-item-secondary" : "";
    }

    private string GetBadgeClassStatus(string status)
    {
        return status switch
        {
            "Pendente" => "bg-warning text-dark",
            "Em Análise" => "bg-info",
            "Aprovada" => "bg-success",
            "Rejeitada" => "bg-danger",
            "Implementada" => "bg-primary",
            "Cancelada" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    private string GetBadgeClassTipoTabela(string tipo)
    {
        return tipo switch
        {
            "DCT" => "bg-primary",
            "FCT" => "bg-success",
            "PCT" => "bg-warning text-dark",
            "PPT" => "bg-info",
            _ => "bg-secondary"
        };
    }
}